(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{1322:function(e,t,n){"use strict";e.exports={meta:{docs:{description:"Require that member overloads be consecutive",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/adjacent-overload-signatures.md"},schema:[]},create(e){function t(t){const n=t.body||t.members;if(n){let t,r,o;const i=[];n.forEach(n=>{t=function e(t){if(!t)return null;switch(t.type){case"ExportDefaultDeclaration":case"ExportNamedDeclaration":return t.declaration?e(t.declaration):null;case"DeclareFunction":case"FunctionDeclaration":case"TSNamespaceFunctionDeclaration":case"TSEmptyBodyFunctionDeclaration":case"TSEmptyBodyDeclareFunction":return t.id&&t.id.name;case"TSMethodSignature":return t.key&&(t.key.name||t.key.value)||t.name&&(t.name.name||t.name.value);case"TSCallSignature":return"call";case"TSConstructSignature":return"new";case"MethodDefinition":return t.key.name||t.key.value;default:return null}}(n),(r=i.indexOf(t))>-1&&o!==t?e.report({node:n,message:`All '${t}' signatures should be adjacent`}):t&&-1===r&&i.push(t),o=t})}}return{TSModuleBlock:t,TSTypeLiteral:t,TSInterfaceBody:t,ClassBody:t,Program:t}}}},1323:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Require PascalCased class and interface names",extraDescription:[r.tslintRule("class-name")],category:"Best Practices",recommended:!0,url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/class-name-casing.md"}},create(e){function t(e){return/^[A-Z][0-9A-Za-z]*$/.test(e)}function n(t,n){let r;switch(n=n||t.id,t.type){case"ClassDeclaration":case"ClassExpression":r="Class";break;case"TSInterfaceDeclaration":r="Interface";break;default:r=t.type}e.report({node:n,message:`${r} '${n.name}' must be PascalCased`})}return{"ClassDeclaration, TSInterfaceDeclaration"(e){e.id&&!t(e.id.name)&&n(e)},VariableDeclarator(e){if(e.init&&"ClassExpression"===e.init.type){const r=e.id;e.init.id&&!t(e.init.id.name)?n(e.init):r&&!t(r.name)&&n(e.init,r)}}}}}},1324:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Require explicit return types on functions and class methods",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/explicit-function-return-type.md"},schema:[{type:"object",properties:{allowExpressions:{type:"boolean"}},additionalProperties:!1}]},create(e){const t=e.options[0]||{};function n(n){var o;t.allowExpressions&&"FunctionDeclaration"!==n.type&&"VariableDeclarator"!==n.parent.type||(n.returnType||"MethodDefinition"===(o=n.parent).type&&"constructor"===o.kind||function(e){return"MethodDefinition"===e.type&&"set"===e.kind}(n.parent)||!r.isTypescript(e.getFilename())||e.report({node:n,message:"Missing return type on function."}))}return{FunctionDeclaration:n,FunctionExpression:n,ArrowFunctionExpression:n}}}},1325:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Require explicit accessibility modifiers on class properties and methods",extraDescription:[r.tslintRule("member-access")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/explicit-member-accessibility.md"},schema:[]},create(e){return{ClassProperty:function(t){!t.accessibility&&r.isTypescript(e.getFilename())&&e.report({node:t,message:`Missing accessibility modifier on class property ${t.key.name}.`})},MethodDefinition:function(t){!t.accessibility&&r.isTypescript(e.getFilename())&&e.report({node:t,message:`Missing accessibility modifier on method definition ${t.key.name}.`})}}}}},1326:function(e,t,n){"use strict";e.exports={meta:{docs:{description:"Enforces naming of generic type variables",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/generic-type-naming.md"}},create(e){const t=e.options[0];if(!t)return{};const n=function(e,t){const n=new RegExp(t);return function(r){const o=r.typeParameters&&r.typeParameters.params;Array.isArray(o)&&0!==o.length&&o.forEach(r=>{const o=r.type;if("TSTypeParameter"===o||"TypeParameter"===o){const o=r.name;if(o&&!n.test(o)){const n={name:o,rule:t};e.report({node:r,message:"Type parameter {{name}} does not match rule {{rule}}",data:n})}}})}}(e,t);return{VariableDeclarator:n,ClassDeclaration:n,InterfaceDeclaration:n,TSInterfaceDeclaration:n,FunctionDeclaration:n,TSCallSignature:n,CallSignature:n}}}},1327:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Require that interface names be prefixed with `I`",extraDescription:[r.tslintRule("interface-name")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/interface-name-prefix.md"},schema:[{enum:["never","always"]}]},create(e){const t="always"!==e.options[0];function n(e){return"string"==typeof e&&/^I[A-Z]/.test(e)}return{TSInterfaceDeclaration:function(r){t?n(r.id.name)&&e.report({node:r.id,message:'Interface name must not be prefixed with "I"'}):n(r.id.name)||e.report({node:r.id,message:'Interface name must be prefixed with "I"'})}}}}},1328:function(e,t,n){"use strict";const r={type:"object",properties:{delimiter:{enum:["none","semi","comma"]},requireLast:{type:"boolean"},ignoreSingleLine:{type:"boolean"}},additionalProperties:!1};e.exports={meta:{docs:{description:"Require a specific member delimiter style for interfaces and type literals",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/member-delimiter-style.md"},fixable:"code",schema:[{type:"object",properties:{delimiter:{enum:["none","semi","comma"]},requireLast:{type:"boolean"},ignoreSingleLine:{type:"boolean"},overrides:{type:"object",properties:{interface:r,typeLiteral:r},additionalProperties:!1}},additionalProperties:!1}]},create(e){const t=e.getSourceCode(),n=e.options[0]||{},r=n.overrides||{},o={delimiter:"semi",requireLast:!0,ignoreSingleLine:!0},i=Object.assign({},o,n,r.interface),s=Object.assign({},o,n,r.typeLiteral);function a(n){const r=n.loc.start.line===n.loc.end.line,o="TSInterfaceBody"===n.type,a=o?n.body:n.members;a.forEach((n,c)=>{!function(n,r,o,i){let s,a=!1;const c=t.getLastToken(n,{includeComments:!1});if(";"===c.value&&"semi"!==r.delimiter)s="comma"===r.delimiter?"Expected a comma.":"Unexpected separator (;).";else if(","===c.value&&"comma"!==r.delimiter)s="semi"===r.delimiter?"Expected a semicolon.":"Unexpected separator (,).";else if(";"!==c.value&&","!==c.value&&"none"!==r.delimiter){let e=o;e&&(e=!r.requireLast||i&&r.ignoreSingleLine),e||(a=!0,s="semi"===r.delimiter?"Expected a semicolon.":"Expected a comma.")}s&&e.report({node:c,loc:{start:{line:c.loc.end.line,column:c.loc.end.column},end:{line:c.loc.end.line,column:c.loc.end.column}},message:s,fix(e){let t;if("semi"===r.delimiter)t=";";else{if("comma"!==r.delimiter)return e.remove(c);t=","}return a?e.insertTextAfter(c,t):o&&!r.requireLast?e.remove(c):e.replaceText(c,t)}})}(n,o?i:s,c===a.length-1,r)})}return{TSInterfaceBody:a,TSTypeLiteral:a}}}},1329:function(e,t,n){"use strict";e.exports={meta:{docs:{description:"Enforces naming conventions for class members by visibility.",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/member-naming.md"},schema:[{type:"object",properties:{public:{type:"string"},protected:{type:"string"},private:{type:"string"}},additionalProperties:!1}]},create(e){const t=e.options[0]||{},n={};for(const e of Object.getOwnPropertyNames(t))n[e]=new RegExp(t[e]);function r(t){const r=t.key.name,o=t.accessibility||"public",i=n[o];i&&!i.test(r)&&e.report({node:t.key,message:"{{accessibility}} property {{name}} should match {{convention}}",data:{accessibility:o,name:r,convention:i}})}return{MethodDefinition:r,ClassProperty:r}}}},1330:function(e,t,n){"use strict";const r=n(500),o=["field","method","constructor"].reduce((e,t)=>(e.push(t),["public","protected","private"].forEach(n=>{e.push(`${n}-${t}`),"constructor"!==t&&["static","instance"].forEach(r=>{-1===e.indexOf(`${r}-${t}`)&&e.push(`${r}-${t}`),e.push(`${n}-${r}-${t}`)})}),e),[]);e.exports={meta:{docs:{description:"Require a consistent member declaration order",extraDescription:[r.tslintRule("member-ordering")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/member-ordering.md"},schema:[{type:"object",properties:{default:{oneOf:[{enum:["never"]},{type:"array",items:{enum:o}}]},classes:{oneOf:[{enum:["never"]},{type:"array",items:{enum:o}}]},classExpressions:{oneOf:[{enum:["never"]},{type:"array",items:{enum:o}}]},interfaces:{oneOf:[{enum:["never"]},{type:"array",items:{enum:["field","method","constructor"]}}]},typeLiterals:{oneOf:[{enum:["never"]},{type:"array",items:{enum:["field","method","constructor"]}}]}},additionalProperties:!1}]},create(e){const t=e.options[0]||{},n=["FunctionExpression","ArrowFunctionExpression"],r=["public-static-field","protected-static-field","private-static-field","public-instance-field","protected-instance-field","private-instance-field","public-field","protected-field","private-field","static-field","instance-field","field","constructor","public-static-method","protected-static-method","private-static-method","public-instance-method","protected-instance-method","private-instance-method","public-method","protected-method","private-method","static-method","instance-method","method"];function o(e){switch(e.type){case"MethodDefinition":return e.kind;case"TSMethodSignature":return"method";case"TSConstructSignature":return"constructor";case"ClassProperty":case"TSPropertySignature":return function(e){return e.value&&n.indexOf(e.value.type)>-1}(e)?"method":"field";default:return null}}function i(t,n,r){if(t&&"never"!==n){const i=[];t.forEach(t=>{const s=function(e,t,n){const r=o(e),i=e.static?"static":"instance",s=e.accessibility||"public",a=[];return n&&("constructor"!==r&&(a.push(`${s}-${i}-${r}`),a.push(`${i}-${r}`)),a.push(`${s}-${r}`)),a.push(r),function(e,t){let n=-1;const r=e.slice();for(;r.length>0&&-1===n;)n=t.indexOf(r.shift());return n}(a,t)}(t,n,r);-1!==s&&(s<i[i.length-1]?e.report({node:t,message:"Member {{name}} should be declared before all {{rank}} definitions.",data:{name:function(e){switch(e.type){case"ClassProperty":case"MethodDefinition":return"constructor"===e.kind?"constructor":e.key.name;case"TSPropertySignature":case"TSMethodSignature":return e.key.name;case"TSConstructSignature":return"new";default:return null}}(t),rank:function(e,t,n){let r=e[e.length-1];return e.forEach(e=>{e>t&&(r=Math.min(r,e))}),n[r].replace(/-/g," ")}(i,s,n)}}):i.push(s))})}}return{ClassDeclaration(e){i(e.body.body,t.classes||t.default||r,!0)},ClassExpression(e){i(e.body.body,t.classExpressions||t.default||r,!0)},TSInterfaceDeclaration(e){i(e.body.body,t.interfaces||t.default||r,!1)},TSTypeLiteral(e){i(e.members,t.typeLiterals||t.default||r,!1)}}}}},1331:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Enforces the use of `as Type` assertions instead of `<Type>` assertions",extraDescription:[r.tslintRule("no-angle-bracket-type-assertion")],category:"Style",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-angle-bracket-type-assertion.md"},schema:[]},create(e){const t=e.getSourceCode();return{TSTypeAssertionExpression(n){e.report({node:n,message:"Prefer 'as {{cast}}' instead of '<{{cast}}>' when doing type assertions",data:{cast:t.getText(n.typeAnnotation.typeAnnotation)}})}}}}},1332:function(e,t,n){"use strict";e.exports={meta:{docs:{description:"Disallow generic `Array` constructors",category:"Stylistic Issues",recommended:!1,url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-array-constructor.md"},fixable:"code",schema:[]},create(e){function t(t){1===t.arguments.length||"Identifier"!==t.callee.type||"Array"!==t.callee.name||t.typeParameters||e.report({node:t,message:"The array literal notation [] is preferrable.",fix(n){if(0===t.arguments.length)return n.replaceText(t,"[]");const r=e.getSourceCode().getText(t),o=t.callee.range[1]-t.range[0];return n.replaceText(t,`[${r.slice(o+1,-1)}]`)}})}return{CallExpression:t,NewExpression:t}}}},1333:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallow the declaration of empty interfaces",extraDescription:[r.tslintRule("no-empty-interface")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-empty-interface.md"},schema:[]},create:e=>({TSInterfaceDeclaration(t){const n=t.heritage.length;0===t.body.body.length&&n<2&&e.report({node:t.id,message:0===n?"An empty interface is equivalent to `{}`":"An interface declaring no members is equivalent to its supertype."})}})}},1334:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallow usage of the `any` type",extraDescription:[r.tslintRule("no-any")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-explicit-any.md"},schema:[]},create(e){function t(n){"TSAnyKeyword"===n.type?e.report({node:n,message:"Unexpected any. Specify a different type."}):"TSArrayType"===n.type?t(n.elementType):"TSUnionType"===n.type||"TSIntersectionType"===n.type?n.types.forEach(e=>{t(e)}):"TSTypeReference"===n.type?n.typeParameters?n.typeParameters.params.forEach(e=>{t(e)}):n.typeName&&t(n.typeName):"GenericTypeAnnotation"===n.type&&(n.typeParameters?n.typeParameters.params.forEach(e=>{t(e)}):t(n.id))}function n(e){e.returnType&&t(e.returnType.typeAnnotation)}return{Identifier(e){e.typeAnnotation&&t(e.typeAnnotation.typeAnnotation)},TSTypeAnnotation(e){e.typeAnnotation&&t(e.typeAnnotation)},FunctionDeclaration:n,FunctionExpression:n,ArrowFunctionExpression:n}}}},1335:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.",extraDescription:[r.tslintRule("no-inferrable-types")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-inferrable-types.md"},fixable:"code",schema:[{type:"object",properties:{ignoreParameters:{type:"boolean"},ignoreProperties:{type:"boolean"}},additionalProperties:!1}]},create(e){const t=!!e.options[0]&&e.options[0].ignoreParameters,n=!!e.options[0]&&e.options[0].ignoreProperties;function r(t,n,r){if(!n||!r||!n.typeAnnotation)return;if(!function(e,t){if("TSTypeAnnotation"!==e.type||!e.typeAnnotation)return!1;if(!t)return!1;const n=e.typeAnnotation;return"TSStringKeyword"===n.type?"Literal"===t.type&&"string"==typeof t.value||"TemplateElement"===t.type&&(!t.expressions||0===t.expressions.length):"TSBooleanKeyword"===n.type?"Literal"===t.type:"TSNumberKeyword"===n.type&&("UnaryExpression"===t.type&&"-"===t.operator&&"Identifier"===t.argument.type&&"Infinity"===t.argument.name||"Identifier"===t.type&&"Infinity"===t.name||"Literal"===t.type&&"number"==typeof t.value)}(n,r))return;const o={TSBooleanKeyword:"boolean",TSNumberKeyword:"number",TSStringKeyword:"string"}[n.typeAnnotation.type];e.report({node:t,message:`Type ${o} trivially inferred from a ${o} literal, remove type annotation`,fix:e=>e.remove(n)})}function o(e){!t&&e.params&&e.params.filter(e=>"AssignmentPattern"===e.type&&e.left&&e.right).forEach(e=>{r(e,e.left.typeAnnotation,e.right)})}return{VariableDeclarator:function(e){e.id&&r(e,e.id.typeAnnotation,e.init)},FunctionExpression:o,FunctionDeclaration:o,ArrowFunctionExpression:o,ClassProperty:function(e){n||e.readonly||r(e,e.typeAnnotation,e.value)}}}}},1336:function(e,t,n){"use strict";e.exports={meta:{docs:{description:"Disallow the use of custom TypeScript modules and namespaces",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-namespace.md"},schema:[{type:"object",properties:{allowDeclarations:{type:"boolean"},allowDefinitionFiles:{type:"boolean"}},additionalProperties:!1}]},create(e){const t=!!e.options[0]&&e.options[0].allowDeclarations,n=!!e.options[0]&&e.options[0].allowDefinitionFiles;function r(e){return e.id&&"Literal"===e.id.type}return{TSModuleDeclaration(o){r(o)||n&&function(){const t=e.getFilename();return!!t&&".d.ts"===t.slice(-5).toLowerCase()}()||t&&function(e){return!0===e.declare&&!r(e)}(o)||e.report({node:o,message:"ES2015 module syntax is preferred over custom TypeScript modules and namespaces"})}}}}},1337:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallows non-null assertions using the `!` postfix operator",extraDescription:[r.tslintRule("no-non-null-assertion")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-non-null-assertion.md"},schema:[]},create:e=>({TSNonNullExpression(t){e.report({node:t,message:"Forbidden non-null assertion"})}})}},1338:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallow the use of parameter properties in class constructors.",extraDescription:[r.tslintRule("no-parameter-properties")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-parameter-properties.md"},schema:[{type:"object",properties:{allows:{type:"array",items:{enum:["readonly","private","protected","public","private readonly","protected readonly","public readonly"]},minItems:1}},additionalProperties:!1}]},create(e){const t=(e.options[0]||{}).allows||[];return{TSParameterProperty(n){const r=function(e){const t=[];return t.push(e.accessibility),(e.readonly||e.isReadonly)&&t.push("readonly"),t.filter(Boolean).join(" ")}(n);-1===t.indexOf(r)&&e.report({node:n,message:"Property {{parameter}} cannot be declared in the constructor",data:{parameter:n.parameter.name}})}}}}},1339:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:'Disallow `/// <reference path="" />` comments',extraDescription:[r.tslintRule("no-reference")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-triple-slash-reference.md"},schema:[]},create(e){const t=/^\/\s*<reference/,n=e.getSourceCode();return{Program:function(r){n.getCommentsBefore(r).forEach(n=>{"Line"===n.type&&t.test(n.value)&&e.report({node:n,message:"Do not use a triple slash reference"})})}}}}},1340:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallow the use of type aliases",extraDescription:[r.tslintRule("interface-over-type-literal")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-type-alias.md"},schema:[{type:"object",properties:{allowAliases:{enum:[!0,!1,"always","never","in-unions","in-intersections","in-unions-and-intersections"]},allowCallbacks:{enum:[!0,!1,"always","never"]},allowLiterals:{enum:[!0,!1,"always","never","in-unions","in-intersections","in-unions-and-intersections"]},allowMappedTypes:{enum:[!0,!1,"always","never","in-unions","in-intersections","in-unions-and-intersections"]}},additionalProperties:!1}]},create(e){const t=e.options[0],n=t&&t.allowAliases||"never",r=t&&t.allowCallbacks||"never",o=t&&t.allowLiterals||"never",i=t&&t.allowMappedTypes||"never",s=[!0,"always","in-unions","in-unions-and-intersections"],a=[!0,"always","in-intersections","in-unions-and-intersections"],c=["in-unions","in-intersections","in-unions-and-intersections"],p=["TSLastTypeNode","TSArrayType","TSTypeReference","TSLiteralType"];function l(e){return e&&("TSUnionType"===e.type||"TSIntersectionType"===e.type)}function u(e,t,n){return-1===c.indexOf(n)||!e&&("TSUnionType"===t&&s.indexOf(n)>-1||"TSIntersectionType"===t&&a.indexOf(n)>-1)}function m(e,t,n){return t?n?`Type ${n} are not allowed`:"Type aliases are not allowed":"TSUnionType"===e?`${n[0].toUpperCase()}${n.substring(1)} in union types are not allowed`:`${n[0].toUpperCase()}${n.substring(1)} in intersection types are not allowed`}function d(t,s,a){!function(e){return e&&(/Keyword$/.test(e.type)||p.indexOf(e.type)>-1)}(t)?!function(e){return e&&"TSFunctionType"===e.type}(t)?!function(e){return e&&"TSTypeLiteral"===e.type}(t)?!function(e){return e&&"TSMappedType"===e.type}(t)?e.report({node:t,message:m(a,s)}):"never"!==i&&u(s,a,i)||e.report({node:t,message:m(a,s,"mapped types")}):"never"!==o&&u(s,a,o)||e.report({node:t,message:m(a,s,"literals")}):"never"===r&&e.report({node:t,message:m(a,s,"callbacks")}):"never"!==n&&u(s,a,n)||e.report({node:t,message:m(a,s,"aliases")})}function y(e,t){l(e)?function e(t){t.types.forEach(n=>{l(n)?e(n):d(n,!1,t.type)})}(e):d(e,t)}return{VariableDeclaration(e){"type"===e.kind&&y(e.declarations[0].init,!0)}}}}},1341:function(e,t,n){"use strict";function r(e,t){let n,r,o,i=e.getScope(),s=!1;if("global"===i.type)for(;i.childScopes.length;)i=i.childScopes[0];do{for(r=0,o=(n=i.variables).length;r<o;r++)n[r].name===t&&(n[r].eslintUsed=!0,s=!0);i=i.upper}while(i);return s}e.exports={meta:{docs:{description:"Prevent TypeScript-specific constructs from being erroneously flagged as unused",category:"TypeScript",recommended:!0,url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-unused-vars.md"},schema:[]},create(e){function t(n){const o=n.typeAnnotation||n;switch(o.type){case"Identifier":r(e,o.name);break;case"TSArrayType":t(o.elementType);break;case"TSQualifiedName":t(o.left),t(o.right);break;case"TSTypeReference":"TSArrayType"===o.typeName.type?t(o.typeName.elementType):"TSQualifiedName"===o.typeName.type?t(o.typeName):(r(e,o.typeName.name),o.typeParameters&&o.typeParameters.params&&o.typeParameters.params.forEach(e=>{t(e)}));break;case"TSTypeLiteral":o.members.forEach(e=>{e.typeAnnotation&&t(e.typeAnnotation)});break;case"TSUnionType":case"TSIntersectionType":o.types.forEach(e=>{t(e)});break;case"TSTypeParameter":o.constraint&&t(o.constraint),o.default&&t(o.default);break;case"TSMappedType":t(o.typeAnnotation),t(o.typeParameter)}}function n(t){t.name?r(e,t.name):t.expression&&t.expression.name?r(e,t.expression.name):(t.callee&&t.callee.name&&r(e,t.callee.name),t.expression&&t.expression.callee&&t.expression.callee.name&&r(e,t.expression.callee.name))}function o(n){n&&n.id&&n.id.name&&(r(e,n.id.name),n.typeParameters&&n.typeParameters.params&&n.typeParameters.params.forEach(t))}function i(e){e.typeParameters&&e.typeParameters.params&&e.typeParameters.params.forEach(t)}function s(e){e.typeParameters&&e.typeParameters.params&&e.typeParameters.params.forEach(t),e.returnType&&t(e.returnType)}function a(i){!function(n){n.superClass&&(r(e,n.superClass.name),n.superTypeParameters&&n.superTypeParameters.params&&n.superTypeParameters.params.forEach(t))}(i),i.implements&&i.implements.forEach(o),i.decorators&&i.decorators.forEach(n),i.typeParameters&&i.typeParameters.params&&i.typeParameters.params.forEach(t)}return{Identifier(e){e.typeAnnotation&&t(e.typeAnnotation),e.decorators&&e.decorators.forEach(n)},TSTypeAnnotation(e){e.typeAnnotation&&t(e.typeAnnotation)},TSParameterProperty(t){r(e,t.parameter.name)},FunctionDeclaration:s,FunctionExpression:s,ArrowFunctionExpression:s,CallExpression:i,NewExpression:i,Decorator:n,TSInterfaceHeritage:function(n){n&&n.id&&n.id.name&&(r(e,n.id.name),n.typeParameters&&n.typeParameters.params&&n.typeParameters.params.forEach(t))},ClassDeclaration:a,ClassExpression:a,ObjectPattern(e){e.typeAnnotation&&t(e.typeAnnotation)},MethodDefinition(e){e.decorators&&e.decorators.forEach(n)}}}}},1342:function(e,t,n){"use strict";const r=/^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/,o=/^For(?:In|Of)Statement$/;function i(e){return"module"===e.type||"global"===e.type}function s(e,t){return e&&e.range[0]<=t&&t<=e.range[1]}e.exports={meta:{docs:{description:"Disallow the use of variables before they are defined",category:"Variables",recommended:!1,url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-use-before-define.md"},schema:[{oneOf:[{enum:["nofunc"]},{type:"object",properties:{functions:{type:"boolean"},classes:{type:"boolean"},variables:{type:"boolean"},typedefs:{type:"boolean"}},additionalProperties:!1}]}]},create(e){const t=function(e){let t=!0,n=!0,r=!0,o=!0;return"string"==typeof e?t="nofunc"!==e:"object"==typeof e&&null!==e&&(t=!1!==e.functions,n=!1!==e.classes,r=!1!==e.variables,o=!1!==e.typedefs),{functions:t,classes:n,variables:r,typedefs:o}}(e.options[0]);function n(e,n){return function(e){return"FunctionName"===e.defs[0].type}(e)?t.functions:function(e,t){return"ClassName"===e.defs[0].type&&!(e.scope.variableScope===t.from.variableScope&&!i(e.scope.variableScope))}(e,n)?t.classes:!(function(e){return"Variable"===e.defs[0].type&&"type"===e.defs[0].parent.kind}(e)&&!t.typedefs)&&(!function(e,t){return"Variable"===e.defs[0].type&&!(e.scope.variableScope===t.from.variableScope&&!i(e.scope.variableScope))}(e,n)||t.variables)}function a(t){t.references.forEach(t=>{const i=t.resolved;t.init||!i||0===i.identifiers.length||i.identifiers[0].range[1]<t.identifier.range[1]&&!function(e,t){if(e.scope!==t.from)return!1;let n=e.identifiers[0].parent;const i=t.identifier.range[1];for(;n;){if("VariableDeclarator"===n.type){if(s(n.init,i))return!0;if(o.test(n.parent.parent.type)&&s(n.parent.parent.right,i))return!0;break}if("AssignmentPattern"===n.type){if(s(n.right,i))return!0}else if(r.test(n.type))break;n=n.parent}return!1}(i,t)||!n(i,t)||e.report({node:t.identifier,message:"'{{name}}' was used before it was defined.",data:t.identifier})})}function c(){a(e.getScope())}const p={"Program:exit"(t){const n=e.getScope(),r=e.parserOptions.ecmaFeatures||{};a(n),(r.globalReturn||"module"===t.sourceType)&&a(n.childScopes[0])}};return e.parserOptions.ecmaVersion>=6?(p["BlockStatement:exit"]=c,p["SwitchStatement:exit"]=c,p["ArrowFunctionExpression:exit"]=function(e){"BlockStatement"!==e.body.type&&c()}):(p["FunctionExpression:exit"]=c,p["FunctionDeclaration:exit"]=c,p["ArrowFunctionExpression:exit"]=c),p}}},1343:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Disallows the use of require statements except in import statements",extraDescription:[r.tslintRule("no-var-requires")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/no-var-requires.md"},schema:[]},create:e=>({CallExpression(t){"require"===t.callee.name&&"VariableDeclarator"===t.parent.type&&e.report({node:t,message:"Require statement not part of import statement"})}})}},1344:function(e,t,n){"use strict";const r=n(500);e.exports={meta:{docs:{description:"Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules.",extraDescription:[r.tslintRule("no-internal-module")],category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/prefer-namespace-keyword.md"},fixable:"code",schema:[]},create(e){const t=e.getSourceCode();return{TSModuleDeclaration(n){const r=t.getFirstToken(n),o=[r].concat(t.getTokensBetween(r,t.getFirstToken(n.body))),i=o.findIndex(e=>"Identifier"===e.type&&"module"===e.value),s=-1===i?null:o[i],a=o[i+1];s&&"String"!==a.type&&e.report({node:n,message:"Use 'namespace' instead of 'module' to declare custom TypeScript modules",fix:e=>e.replaceText(s,"namespace")})}}}}},1345:function(e,t,n){"use strict";const r={type:"object",properties:{before:{type:"boolean"},after:{type:"boolean"}},additionalProperties:!1};e.exports={meta:{docs:{description:"Require consistent spacing around type annotations",category:"TypeScript",url:"https://github.com/nzakas/eslint-plugin-typescript/blob/master/docs/rules/type-annotation-spacing.md"},fixable:"code",schema:[{type:"object",properties:{before:{type:"boolean"},after:{type:"boolean"},overrides:{type:"object",properties:{colon:r,arrow:r},additionalProperties:!1}}}]},create(e){const t=[":","=>"],n=e.getSourceCode(),r=e.options[0]||{},o=r.overrides||{},i=Object.assign({},{before:!1,after:!0},r,o.colon),s=Object.assign({},{before:!0,after:!0},r,o.arrow);function a(r){const o=r,a=n.getTokenBefore(o);let c=a,p=n.getTokenBefore(a),l=a.value;if(-1===t.indexOf(l))return;const u=":"===l?i.before:s.before,m=":"===l?i.after:s.after;":"===l&&"?"===p.value&&(l="?:",c=p,"+"!==(p=n.getTokenBefore(p)).value&&"-"!==p.value||(l=`${p.value}?:`,c=p,p=n.getTokenBefore(p)));const d=c.range[0]-p.range[1],y=o.range[0]-a.range[1];m&&0===y?e.report({node:a,message:`Expected a space after the '${l}'`,fix:e=>e.insertTextAfter(a," ")}):!m&&y>0&&e.report({node:a,message:`Unexpected space after the '${l}'`,fix:e=>e.removeRange([a.range[1],o.range[0]])}),u&&0===d?e.report({node:c,message:`Expected a space before the '${l}'`,fix:e=>e.insertTextAfter(p," ")}):!u&&d>0&&e.report({node:c,message:`Unexpected space before the '${l}'`,fix:e=>e.removeRange([p.range[1],c.range[0]])})}function c(e){e.returnType&&a(e.returnType.typeAnnotation||e.returnType)}return{Identifier(e){e.typeAnnotation&&a(e.typeAnnotation.typeAnnotation||e.typeAnnotation)},TSTypeAnnotation(e){a(e.typeAnnotation)},FunctionDeclaration:c,FunctionExpression:c,ArrowFunctionExpression:c}}}},1849:function(e,t,n){e.exports={rules:{"typescript/adjacent-overload-signatures":n(1322),"typescript/class-name-casing":n(1323),"typescript/explicit-function-return-type":n(1324),"typescript/explicit-member-accessibility":n(1325),"typescript/generic-type-naming":n(1326),"typescript/interface-name-prefix":n(1327),"typescript/member-delimiter-style":n(1328),"typescript/member-naming":n(1329),"typescript/member-ordering":n(1330),"typescript/no-angle-bracket-type-assertion":n(1331),"typescript/no-array-constructor":n(1332),"typescript/no-empty-interface":n(1333),"typescript/no-explicit-any":n(1334),"typescript/no-inferrable-types":n(1335),"typescript/no-namespace":n(1336),"typescript/no-non-null-assertion":n(1337),"typescript/no-parameter-properties":n(1338),"typescript/no-triple-slash-reference":n(1339),"typescript/no-type-alias":n(1340),"typescript/no-unused-vars":n(1341),"typescript/no-use-before-define":n(1342),"typescript/no-var-requires":n(1343),"typescript/prefer-namespace-keyword":n(1344),"typescript/type-annotation-spacing":n(1345)}}},500:function(e,t,n){"use strict";t.tslintRule=(e=>`\`${e}\` from TSLint`),t.isTypescript=(e=>/\.tsx?$/.test(e))}}]);